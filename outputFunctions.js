/* File of outputFunctions to be used in index.batchProcess()
 *
 *     Each is named to be used with matching requestBody in requestBodies.js
 *     Each takes following parameters:
 *   {report} which is the report generated by batchGet({requestBody})
 *   {section} which is the JSON object to store processed data from report
 */

// Takes pair of resulting metrics from batchGet
// (ex: current week vs past week)
// and formats it into CDS report and finds %change
function dataToText(currData, pastData) {
    // Limits Trailing Zeroes
    const parsedCurrData = parseFloat(parseInt(currData).toFixed(2));
    const parsedPastData = parseFloat(parseInt(pastData).toFixed(2));

    const percentChange = Math.fround(
        ((parsedCurrData - parsedPastData) / parsedPastData) * 100
    ).toFixed(2);

    if (percentChange > 0)
        return (
            ' up ' +
            percentChange +
            '% (' +
            parsedCurrData +
            ' vs ' +
            parsedPastData +
            ') ⬆'
        );
    else
        return (
            ' down ' +
            percentChange +
            '% (' +
            parsedCurrData +
            ' vs ' +
            parsedPastData +
            ') ⬇'
        );
}

//
function defaultRequestOutput(report, section) {
    // De-structures batchGet report
    let {
        columnHeader: {
            dimensions,
            metricHeader: { metricHeaderEntries },
        },
        data,
    } = report;

    // Puts metric headers into an array
    var headers = [];
    for (var i = 0, header; (header = metricHeaderEntries[i]); i++) {
        headers.push(header.name);
    }

    // Puts result rows into an array
    var rows = [];
    for (var i = 0, row; (row = data.rows[i]); i++) {
        rows.push(row);
    }

    console.log('Dimensions: ' + dimensions);
    console.log('Metrics: ' + headers);
    console.log();

    for (i = 0; i < rows.length; i++) {
        // Values from current time frame (Ex: This week)
        let currValues = rows[i].metrics[0].values;

        // Values from last time frame (Ex: last week)
        let pastValues = rows[i].metrics[1].values;

        // Separates values arrays into discrete values
        for (i = 0; i < headers.length; i++) {
            let header = headers[i];
            let currVal = currValues[i];
            let pastVal = pastValues[i];

            // Turns raw data into formatted string to be used in weekly report
            let format = dataToText(currVal, pastVal);

            // Creates new variable in section object, to be read by DOCS API
            section[header] = format;

            // Test output
            //console.log(headers[i] + format);
        }
    }
    // Test output
    //console.log(section);
}

//
function defaultChannelGroupingOutput(report, section) {
    // De-structures batchGet report
    let {
        columnHeader: {
            dimensions,
            metricHeader: { metricHeaderEntries },
        },
        data,
    } = report;

    // Puts metric headers into an array
    var headers = [];
    for (var i = 0, header; (header = metricHeaderEntries[i]); i++) {
        headers.push('' + header.name);
    }

    // Puts result rows into an array
    var rows = [];
    for (var i = 0, row; i < data.rows.length; i++) {
        row = data.rows[i];
        rows.push(row);
    }

    console.log('Dimensions: ' + dimensions);
    console.log('Metrics: ' + headers);
    console.log();

    // Puts string into section object
    section['mostPageViewsCameFrom'] = rows[0].dimensions[0];

    for (i = 0; i < rows.length; i++) {
        // Dimension Label (Ex: Facebook)
        let label = rows[i].dimensions[0];

        let currVal = rows[i].metrics[0].values[0];
        let prevVal = rows[i].metrics[1].values[0];

        // pageviews formatted to fixed number of digits
        let pageviews = dataToText(currVal, prevVal);

        section[label] = pageviews;
    }
}

function top10ArticlesOutput(report, section) {
    // De-structures batchGet report
    let {
        columnHeader: {
            dimensions,
            metricHeader: { metricHeaderEntries },
        },
        data,
    } = report;

    // Puts metric headers into an array
    var headers = [];
    for (var i = 0, header; (header = metricHeaderEntries[i]); i++) {
        headers.push('' + header.name);
    }

    // Puts result rows into an array
    var rows = [];
    for (var i = 0, row; (row = data.rows[i]); i++) {
        rows.push(row);
    }

    console.log('Dimensions: ' + dimensions);
    console.log('Metrics: ' + headers);
    console.log();

    // String that holds formatted list of top 10 articles
    let top10ArticlesFormatted = '';

    for (i = 0; i < rows.length; i++) {
        // Dimension Label (Ex: Facebook)
        let articleLink = rows[i].dimensions[0];

        // pageviews formatted to fixed number of digits
        let pageviews = Number(rows[i].metrics[0].values[0]);

        top10ArticlesFormatted += `${articleLink}\n`;
    }

    // Puts string into section object
    section['top10Articles'] = top10ArticlesFormatted;
}

function percentUsersFromNYCOutput(report, section) {
    defaultRequestOutput(report, section);
}

function socialNetworkOutput(report, section) {
    // De-structures batchGet report
    let {
        columnHeader: {
            dimensions,
            metricHeader: { metricHeaderEntries },
        },
        data,
    } = report;

    // Puts metric headers into an array
    var headers = [];
    for (var i = 0, header; (header = metricHeaderEntries[i]); i++) {
        headers.push('' + header.name);
    }

    // Puts result rows into an array
    var rows = [];
    for (var i = 0, row; (row = data.rows[i]); i++) {
        rows.push(row);
    }

    console.log('Dimensions: ' + dimensions);
    console.log('Metrics: ' + headers);
    console.log();

    // Puts string into section object
    section['mostUsersCameFrom'] = rows[0].dimensions[0];

    for (i = 0; i < rows.length; i++) {
        // Dimension Label (Ex: Facebook)
        let label = rows[i].dimensions[0];

        let currVal = rows[i].metrics[0].values[0];
        let prevVal = rows[i].metrics[1].values[0];

        // pageviews formatted to fixed number of digits
        let users = dataToText(currVal, prevVal);

        section[label] = users;
    }
}

module.exports = {
    defaultRequestOutput,
    top10ArticlesOutput,
    defaultChannelGroupingOutput,
    percentUsersFromNYCOutput,
    socialNetworkOutput,
};
