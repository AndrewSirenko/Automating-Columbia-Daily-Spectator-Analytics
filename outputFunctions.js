/* File of outputFunctions to be used in index.batchProcess()
 *
 *     Each is named to be used with matching requestBody in requestBodies.js
 *     Each takes following parameters:
 *   {report} which is the report generated by batchGet({requestBody})
 *   {section} which is the JSON object to store processed data from report
 */

const formatter = require('formatter');

//default
function defaultRequestOutput(report, section = {}) {
    // De-structures batchGet report
    let {
        columnHeader: {
            dimensions,
            metricHeader: { metricHeaderEntries },
        },
        data,
    } = report;

    // Puts metric headers into an array
    var headers = [];
    for (var i = 0, header; (header = metricHeaderEntries[i]); i++) {
        headers.push(header.name);
    }

    // Puts result rows into an array
    var rows = [];
    for (var i = 0, row; (row = data.rows[i]); i++) {
        rows.push(row);
    }

    console.log('Dimensions: ' + dimensions);
    console.log('Metrics: ' + headers);
    console.log();

    var section = {};

    for (i = 0; i < rows.length; i++) {
        // Values from current time frame (Ex: This week)
        let currValues = rows[i].metrics[0].values;

        // Values from last time frame (Ex: last week)
        let pastValues = rows[i].metrics[1].values;

        // Separates values arrays into discrete values
        for (i = 0; i < headers.length; i++) {
            let header = headers[i];
            let currVal = currValues[i];
            let pastVal = pastValues[i];

            // Turns raw data into formatted string to be used in weekly report
            let format = formatter.dataToText(currVal, pastVal);

            // Creates new variable in section object, to be read by DOCS API
            section[header] = format;

            // Test output
            console.log(headers[i] + format);
        }
    }
    // Test output
    console.log(section);
}

module.exports = {
    defaultRequestOutput,
};
